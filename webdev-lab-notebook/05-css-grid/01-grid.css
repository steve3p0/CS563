/* .grid-container {
  background-color: rgb(190, 190, 231);
} */

.grid-container {
  /* The original background-color: rgb(190, 190, 231); might be visible in gaps. */
  /* Assuming items have their own background and page background is white for white gaps. */
  /* Or set a specific gap color if needed, though gap property usually inherits container background. */
  gap: 10px;
  background-color: rgb(190, 190, 231);
}

/* Grid Container 1 */
/* Target: css-ex08-grid-01.png */
.grid-container-1 {
  display: grid;
  /* Adjusted column widths: 1st column is 1 part, 2nd and 3rd columns are 4 parts each */
  grid-template-columns: 1fr 4fr 4fr;
  grid-template-rows: repeat(3, auto); /* Or 1fr for equal height rows */
  /* Assuming items will fill cells and cell (3,3) remains empty implicitly */
}

/* Grid Container 2 */
/* Target: css-ex08-grid-02.png */
/* use height: 400px; on the container */
.grid-container-2 {
  display: grid;
  /* Adjusted column widths: Col 2 is 1/2 the width of Cols 1, 3, & 4 */
  grid-template-columns: 1fr 2fr 1fr 1fr;
  /* Image suggests first row is smaller than the second row */
  grid-template-rows: 1fr 3fr; /* Approximate ratio, adjust if needed */
  height: 400px;
}

/* Grid Container 3 */
/* Target: css-ex08-grid-03.png */
/* use height: 400px; on the container */
.grid-container-3 {
  display: grid;
  grid-template-columns: 1fr 3fr 3fr;
  grid-template-rows: 1fr 2fr 2fr;
  height: 400px;
}

.grid-container-3 .item8 {
  grid-column: 2 / span 2; /* Item 8 spans from column 2 for two columns */
}

/* Grid Container 4 */
/* Target: css-ex08-grid-04.png - with modification for item 6 */
/* use height: 600px; on the container */
.grid-container-4 {
  display: grid;
  grid-template-columns: 1fr 2fr; /* First column narrower than the second */
  grid-template-rows: repeat(5, 1fr); /* 5 equal height rows */
  height: 600px;
}

.grid-container-4 .item1 {
  grid-column: 1 / 2;
  grid-row: 1 / span 2; /* Item 1 spans 2 rows in the first column */
}
.grid-container-4 .item2 {
  grid-column: 2 / 3;
  grid-row: 1 / 2;
}
.grid-container-4 .item3 {
  grid-column: 2 / 3;
  grid-row: 2 / 3;
}
.grid-container-4 .item4 {
  grid-column: 1 / 2;
  grid-row: 3 / 4;
}
.grid-container-4 .item5 {
  grid-column: 2 / 3;
  grid-row: 3 / 4;
}
.grid-container-4 .item6 {
  grid-column: 1 / -1; /* Item 6 spans the entire width of its row (columns 1 through last) */
  grid-row: 4 / 5;
}
.grid-container-4 .item7 {
  grid-column: 1 / 2;
  grid-row: 5 / 6;
}
.grid-container-4 .item8 {
  grid-column: 2 / 3;
  grid-row: 5 / 6;
}